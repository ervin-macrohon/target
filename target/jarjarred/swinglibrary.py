'''
This file is generated automatically and should not be edited.
'''
keywords = ['addTableCellSelection', 'allCheckboxesShouldBeChecked', 'allCheckboxesShouldBeUnchecked', 'buttonShouldBeDisabled', 'buttonShouldBeEnabled', 'buttonShouldExist', 'buttonShouldNotExist', 'callComponentMethod', 'cancelFileChooser', 'checkAllCheckboxes', 'checkBoxShouldBeChecked', 'checkBoxShouldBeDisabled', 'checkBoxShouldBeEnabled', 'checkBoxShouldBeUnchecked', 'checkBoxShouldNotBeChecked', 'checkCheckBox', 'chooseFromFileChooser', 'clearSelectionFromList', 'clearTableCell', 'clearTableSelection', 'clearTextField', 'clearTreeSelection', 'clickHyperLink', 'clickOnComponent', 'clickOnListItem', 'clickOnTableCell', 'clickOnTreeNode', 'clickTableHeader', 'closeAllDialogs', 'closeDialog', 'closeInternalFrame', 'closeWindow', 'collapseAllTreeNodes', 'collapseTreeNode', 'comboBoxShouldBeDisabled', 'comboBoxShouldBeEnabled', 'componentShouldBeVisible', 'componentShouldExist', 'componentShouldNotBeVisible', 'componentShouldNotExist', 'deIconifyInternalFrame', 'decreaseSpinnerValue', 'dialogShouldBeOpen', 'dialogShouldNotBeOpen', 'expandAllTreeNodes', 'expandTreeNode', 'findTableRow', 'focusToComponent', 'getButtonText', 'getComboboxValues', 'getCurrentContext', 'getInternalFramesInContext', 'getLabelContent', 'getListItemCount', 'getListValues', 'getMainMenuItemName', 'getMainMenuItemNames', 'getMenuItemNames', 'getMenuItemsFromPopupMenu', 'getNodeItemsFromTreePopupMenu', 'getSelectedItemFromComboBox', 'getSelectedItemFromDropdownMenu', 'getSelectedTabLabel', 'getSelectedTableCellValue', 'getSelectedValueFromList', 'getSelectedWindowTitle', 'getSliderValue', 'getSpinnerValue', 'getTableCellProperty', 'getTableCellValue', 'getTableColumnCount', 'getTableColumnValues', 'getTableHeaders', 'getTableRowCount', 'getTableRowValues', 'getTableValues', 'getTextFieldValue', 'getTooltipText', 'getTreeNodeChildNames', 'getTreeNodeCount', 'getTreeNodeIndex', 'getTreeNodeLabel', 'iconifyInternalFrame', 'increaseSpinnerValue', 'insertIntoTextField', 'internalFrameShouldBeOpen', 'internalFrameShouldExist', 'internalFrameShouldNotBeOpen', 'internalFrameShouldNotExist', 'labelShouldExist', 'labelShouldNotExist', 'labelTextShouldBe', 'launchApplication', 'listComponentMethods', 'listComponentsInContext', 'listShouldContain', 'listShouldNotContain', 'listWindows', 'mainMenuItemShouldBeChecked', 'mainMenuItemShouldExist', 'mainMenuItemShouldNotBeChecked', 'mainMenuItemShouldNotExist', 'maximizeInternalFrame', 'menuItemShouldBeChecked', 'menuItemShouldBeDisabled', 'menuItemShouldBeEnabled', 'menuItemShouldExist', 'menuItemShouldNotBeChecked', 'menuItemShouldNotBeEnabled', 'menuItemShouldNotExist', 'minimizeInternalFrame', 'pushButton', 'pushRadioButton', 'pushToggleButton', 'radioButtonShouldBeDisabled', 'radioButtonShouldBeEnabled', 'radioButtonShouldBeSelected', 'radioButtonShouldNotBeSelected', 'rightClickOnComponent', 'runKeywordInSeparateThread', 'scrollComponentToView', 'selectAllListItems', 'selectContext', 'selectDialog', 'selectFromComboBox', 'selectFromDropdownMenu', 'selectFromList', 'selectFromMainMenu', 'selectFromMainMenuAndWait', 'selectFromMenu', 'selectFromMenuAndWait', 'selectFromPopupMenu', 'selectFromPopupMenuOnSelectedTreeNodes', 'selectFromTableCellPopupMenu', 'selectFromTableCellPopupMenuOnSelectedCells', 'selectFromTreeNodePopupMenu', 'selectFromTreeNodePopupMenuInSeparateThread', 'selectMainWindow', 'selectRadioButton', 'selectTab', 'selectTabAsContext', 'selectTabPane', 'selectTableCell', 'selectTableCellArea', 'selectTreeNode', 'selectWindow', 'sendKeyboardEvent', 'setJemmyDispatchModel', 'setJemmyTimeout', 'setJemmyTimeouts', 'setSliderValue', 'setSpinnerNumberValue', 'setSpinnerStringValue', 'setSystemProperty', 'setTableCellValue', 'sliderShouldExist', 'sliderShouldNotExist', 'spinnerShouldExist', 'spinnerShouldNotExist', 'startApplication', 'startApplicationInSeparateThread', 'tableCellPopupMenuShouldBeDisabled', 'tableCellPopupMenuShouldBeEnabled', 'tableCellShouldBeEditable', 'tableCellShouldBeSelected', 'tableCellShouldNotBeEditable', 'tableCellShouldNotBeSelected', 'textFieldShouldBeDisabled', 'textFieldShouldBeEnabled', 'toggleButtonShouldBeSelected', 'toggleButtonShouldNotBeSelected', 'treeNodePopupMenuItemShouldBeDisabled', 'treeNodePopupMenuItemShouldBeEnabled', 'treeNodeShouldBeCollapsed', 'treeNodeShouldBeExpanded', 'treeNodeShouldBeLeaf', 'treeNodeShouldBeSelected', 'treeNodeShouldBeVisible', 'treeNodeShouldExist', 'treeNodeShouldNotBeLeaf', 'treeNodeShouldNotBeSelected', 'treeNodeShouldNotBeVisible', 'treeNodeShouldNotExist', 'typeIntoCombobox', 'typeIntoTableCell', 'typeIntoTextField', 'uncheckAllCheckboxes', 'uncheckCheckBox', 'unselectTreeNode', ]
keyword_arguments = {'addTableCellSelection': ['identifier', 'row', 'cellIdentifier', ],
'allCheckboxesShouldBeChecked': [],
'allCheckboxesShouldBeUnchecked': [],
'buttonShouldBeDisabled': ['identifier', ],
'buttonShouldBeEnabled': ['identifier', ],
'buttonShouldExist': ['identifier', ],
'buttonShouldNotExist': ['identifier', ],
'callComponentMethod': ['identifier', 'method', '*args', ],
'cancelFileChooser': [],
'checkAllCheckboxes': [],
'checkBoxShouldBeChecked': ['identifier', ],
'checkBoxShouldBeDisabled': ['identifier', ],
'checkBoxShouldBeEnabled': ['identifier', ],
'checkBoxShouldBeUnchecked': ['identifier', ],
'checkBoxShouldNotBeChecked': ['identifier', ],
'checkCheckBox': ['identifier', ],
'chooseFromFileChooser': ['fileName=', ],
'clearSelectionFromList': ['identifier', ],
'clearTableCell': ['identifier', 'row', 'columnIdentifier', ],
'clearTableSelection': ['identifier', ],
'clearTextField': ['identifier', ],
'clearTreeSelection': ['identifier', ],
'clickHyperLink': ['identifier', 'linkText', ],
'clickOnComponent': ['identifier', 'times=1', ],
'clickOnListItem': ['identifier', 'listItemIdentifier', 'clickCount=1', ],
'clickOnTableCell': ['identifier', 'row', 'column', 'clickCountString=1', 'buttonString=BUTTON1_MASK', '*keyModifierStrings', ],
'clickOnTreeNode': ['identifier', 'nodeIdentifier', 'clickCount=1', ],
'clickTableHeader': ['identifier', 'columnIdentifier', ],
'closeAllDialogs': [],
'closeDialog': ['identifier', ],
'closeInternalFrame': ['identifier', ],
'closeWindow': ['identifier', ],
'collapseAllTreeNodes': ['identifier', ],
'collapseTreeNode': ['identifier', 'nodeIdentifier', ],
'comboBoxShouldBeDisabled': ['identifier', ],
'comboBoxShouldBeEnabled': ['identifier', ],
'componentShouldBeVisible': ['identifier', ],
'componentShouldExist': ['identifier', ],
'componentShouldNotBeVisible': ['identifier', ],
'componentShouldNotExist': ['identifier', ],
'deIconifyInternalFrame': ['identifier', ],
'decreaseSpinnerValue': ['identifier', 'times=1', ],
'dialogShouldBeOpen': ['identifier', ],
'dialogShouldNotBeOpen': ['identifier', ],
'expandAllTreeNodes': ['identifier', ],
'expandTreeNode': ['identifier', 'nodeIdentifier', ],
'findTableRow': ['identifier', 'text', 'columnIdentifier=', ],
'focusToComponent': ['identifier', ],
'getButtonText': ['identifier', ],
'getComboboxValues': ['identifier', ],
'getCurrentContext': [],
'getInternalFramesInContext': [],
'getLabelContent': ['identifier', ],
'getListItemCount': ['identifier', ],
'getListValues': ['identifier', ],
'getMainMenuItemName': ['index', ],
'getMainMenuItemNames': [],
'getMenuItemNames': ['menuPath', ],
'getMenuItemsFromPopupMenu': ['identifier', 'menuPath', ],
'getNodeItemsFromTreePopupMenu': ['identifier', 'nodeIdentifier', 'menuPath', ],
'getSelectedItemFromComboBox': ['identifier', ],
'getSelectedItemFromDropdownMenu': ['identifier', ],
'getSelectedTabLabel': [],
'getSelectedTableCellValue': ['identifier', 'source=auto', ],
'getSelectedValueFromList': ['identifier', ],
'getSelectedWindowTitle': [],
'getSliderValue': ['identifier', ],
'getSpinnerValue': ['identifier', ],
'getTableCellProperty': ['identifier', 'row', 'columnIdentifier', 'propertyName', ],
'getTableCellValue': ['identifier', 'row', 'columnIdentifier', 'source=auto', ],
'getTableColumnCount': ['identifier', ],
'getTableColumnValues': ['identifier', 'columnIdentifier', ],
'getTableHeaders': ['identifier', ],
'getTableRowCount': ['identifier', ],
'getTableRowValues': ['identifier', 'row', ],
'getTableValues': ['identifier', ],
'getTextFieldValue': ['identifier', ],
'getTooltipText': ['identifier', ],
'getTreeNodeChildNames': ['identifier', 'nodeIdentifier', ],
'getTreeNodeCount': ['identifier', ],
'getTreeNodeIndex': ['identifier', 'nodePath', ],
'getTreeNodeLabel': ['identifier', 'nodeIndex', ],
'iconifyInternalFrame': ['identifier', ],
'increaseSpinnerValue': ['identifier', 'times=1', ],
'insertIntoTextField': ['identifier', 'text', ],
'internalFrameShouldBeOpen': ['identifier', ],
'internalFrameShouldExist': ['identifier', ],
'internalFrameShouldNotBeOpen': ['identifier', ],
'internalFrameShouldNotExist': ['identifier', ],
'labelShouldExist': ['identifier', ],
'labelShouldNotExist': ['identifier', ],
'labelTextShouldBe': ['identifier', 'expected', ],
'launchApplication': ['className', '*args', ],
'listComponentMethods': ['identifier', ],
'listComponentsInContext': ['formatted=', ],
'listShouldContain': ['identifier', 'value', ],
'listShouldNotContain': ['identifier', 'value', ],
'listWindows': [],
'mainMenuItemShouldBeChecked': ['menuPath', ],
'mainMenuItemShouldExist': ['menuPath', ],
'mainMenuItemShouldNotBeChecked': ['menuPath', ],
'mainMenuItemShouldNotExist': ['menuPath', ],
'maximizeInternalFrame': ['identifier', ],
'menuItemShouldBeChecked': ['menuPath', ],
'menuItemShouldBeDisabled': ['menuPath', ],
'menuItemShouldBeEnabled': ['menuPath', ],
'menuItemShouldExist': ['menuPath', ],
'menuItemShouldNotBeChecked': ['menuPath', ],
'menuItemShouldNotBeEnabled': ['menuPath', ],
'menuItemShouldNotExist': ['menuPath', ],
'minimizeInternalFrame': ['identifier', ],
'pushButton': ['identifier', ],
'pushRadioButton': ['identifier', ],
'pushToggleButton': ['identifier', ],
'radioButtonShouldBeDisabled': ['identifier', ],
'radioButtonShouldBeEnabled': ['identifier', ],
'radioButtonShouldBeSelected': ['identifier', ],
'radioButtonShouldNotBeSelected': ['identifier', ],
'rightClickOnComponent': ['identifier', ],
'runKeywordInSeparateThread': ['keywordName', '*arguments', ],
'scrollComponentToView': ['identifier', ],
'selectAllListItems': ['identifier', ],
'selectContext': ['identifier', ],
'selectDialog': ['identifier', ],
'selectFromComboBox': ['identifier', 'comboItemIdentifier', '*verifySelection', ],
'selectFromDropdownMenu': ['menuIdentifier', 'menuItemIdentifier', '*verificationDisabled', ],
'selectFromList': ['identifier', 'listItemIdentifier', '*additionalItemIdentifiers', ],
'selectFromMainMenu': ['menuPath', ],
'selectFromMainMenuAndWait': ['menuPath', ],
'selectFromMenu': ['menuPath', ],
'selectFromMenuAndWait': ['menuPath', ],
'selectFromPopupMenu': ['identifier', 'menuPath', ],
'selectFromPopupMenuOnSelectedTreeNodes': ['identifier', 'menuPath', ],
'selectFromTableCellPopupMenu': ['identifier', 'row', 'columnIdentifier', 'menuPath', ],
'selectFromTableCellPopupMenuOnSelectedCells': ['identifier', 'menuPath', ],
'selectFromTreeNodePopupMenu': ['identifier', 'nodeIdentifier', 'menuPath', ],
'selectFromTreeNodePopupMenuInSeparateThread': ['identifier', 'nodeIdentifier', 'menuPath', ],
'selectMainWindow': [],
'selectRadioButton': ['identifier', ],
'selectTab': ['tabIdentifier', 'tabPaneIdentifier=', ],
'selectTabAsContext': ['tabIdentifier', 'tabPaneIdentifier=', ],
'selectTabPane': ['tabPaneIdentifier', ],
'selectTableCell': ['identifier', 'row', 'cellIdentifier', ],
'selectTableCellArea': ['identifier', 'startRow', 'endRow', 'startColumn', 'endColumn', ],
'selectTreeNode': ['identifier', 'nodeIdentifier', '*additionalNodeIdentifiers', ],
'selectWindow': ['identifier', ],
'sendKeyboardEvent': ['keyCode', '*modifiers', ],
'setJemmyDispatchModel': ['dispatch model', ],
'setJemmyTimeout': ['timeoutName', 'timeout', ],
'setJemmyTimeouts': ['timeout', ],
'setSliderValue': ['identifier', 'value', ],
'setSpinnerNumberValue': ['identifier', 'value', ],
'setSpinnerStringValue': ['identifier', 'value', ],
'setSystemProperty': ['name', 'value', ],
'setTableCellValue': ['identifier', 'row', 'columnIdentifier', 'newValue', ],
'sliderShouldExist': ['identifier', ],
'sliderShouldNotExist': ['identifier', ],
'spinnerShouldExist': ['identifier', ],
'spinnerShouldNotExist': ['identifier', ],
'startApplication': ['className', '*args', ],
'startApplicationInSeparateThread': ['className', '*args', ],
'tableCellPopupMenuShouldBeDisabled': ['identifier', 'row', 'columnIdentifier', 'menuPath', ],
'tableCellPopupMenuShouldBeEnabled': ['identifier', 'row', 'columnIdentifier', 'menuPath', ],
'tableCellShouldBeEditable': ['identifier', 'row', 'columnIdentifier', ],
'tableCellShouldBeSelected': ['identifier', 'row', 'columnIdentifier', ],
'tableCellShouldNotBeEditable': ['identifier', 'row', 'columnIdentifier', ],
'tableCellShouldNotBeSelected': ['identifier', 'row', 'columnIdentifier', ],
'textFieldShouldBeDisabled': ['identifier', ],
'textFieldShouldBeEnabled': ['identifier', ],
'toggleButtonShouldBeSelected': ['identifier', ],
'toggleButtonShouldNotBeSelected': ['identifier', ],
'treeNodePopupMenuItemShouldBeDisabled': ['identifier', 'nodeIdentifier', 'menuPath', ],
'treeNodePopupMenuItemShouldBeEnabled': ['identifier', 'nodeIdentifier', 'menuPath', ],
'treeNodeShouldBeCollapsed': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldBeExpanded': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldBeLeaf': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldBeSelected': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldBeVisible': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldExist': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldNotBeLeaf': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldNotBeSelected': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldNotBeVisible': ['identifier', 'nodeIdentifier', ],
'treeNodeShouldNotExist': ['identifier', 'nodeIdentifier', ],
'typeIntoCombobox': ['identifier', 'text', ],
'typeIntoTableCell': ['identifier', 'row', 'columnIdentifier', 'newValue', ],
'typeIntoTextField': ['identifier', 'text', ],
'uncheckAllCheckboxes': [],
'uncheckCheckBox': ['identifier', ],
'unselectTreeNode': ['identifier', 'nodeIdentifier', ],
}
keyword_documentation = {'addTableCellSelection': 'Selects a cell in a table and adds it to the selection.\nDoes not clear earlier selections.\n\nExamples:\n| `Select Table Cell` | myTable | 0 | 2       | # Selects cell from first row and third column |\n| `Select Table Cell` | myTable | 1 | Keyword | # Selects cell from second row and column with header \'Keyword\' |\n',
'allCheckboxesShouldBeChecked': 'Fails if any checkbox in current context is not checked.\n\nExample:\n| `Select Context` | My Checkbox Panel |\n| `All Checkboxes Should Be Checked` | |\n',
'allCheckboxesShouldBeUnchecked': 'Fails if any checkbox in current context is checked.\n\nExample:\n| `Select Context` | My Checkbox Panel |\n| `All Checkboxes Should Be Unchecked` | |\n',
'buttonShouldBeDisabled': 'Fails if button is enabled.\n\nExample:\n| `Button Should Be Disabled` | OK |\n',
'buttonShouldBeEnabled': 'Fails if button is disabled.\n\nExample:\n| `Button Should Be Enabled` | OK |\n',
'buttonShouldExist': 'Fails if button does not exist within current context.\n\nExample:\n| `Button Should Exist` | OK |\n',
'buttonShouldNotExist': 'Fails if button exists within current context.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.\n\nExample:\n| `Set Jemmy Timeouts`      | 1  |\n| `Button Should Not Exist` | OK |\n',
'callComponentMethod': 'Calls a method from specified component.\n\nArguments are automatically converted if possible to type expected by the method.\n\nExample:\n| `Call Component Method` | buttonId | setToolTipText | new tooltip text |',
'cancelFileChooser': 'Cancels and closes file chooser.\nExpects the file chooser to be open.\n\nExample:\n| `Push Button`         | Open File |\n| `Cancel File Chooser` |             |\n',
'checkAllCheckboxes': 'Checks all checkboxes in current context.\n\nExample:\n| `Select Context` | My Checkbox Panel |\n| `Check All Checkboxes` | |\n',
'checkBoxShouldBeChecked': 'Fails if checkbox is not checked.\n\nExample:\n| `Check Box Should Be Checked` | My Checkbox |\n',
'checkBoxShouldBeDisabled': 'Fails if checkbox is enabled.\n\nExample:\n| `Check Box Should Be Disabled` | My Checkbox |\n',
'checkBoxShouldBeEnabled': 'Fails if checkbox is disabled.\n\nExample:\n| `Check Box Should Be Enabled` | My Checkbox |\n',
'checkBoxShouldBeUnchecked': 'Fails if checkbox is checked.\n\nExample:\n| `Check Box Should Be Unchecked` | My Checkbox |\n',
'checkBoxShouldNotBeChecked': 'Alias for `Check Box Should Be Unchecked` keyword.\n',
'checkCheckBox': 'Uses current context to search for a checkbox and when found, checks it.\n\nExample:\n| `Check Check Box` | My Checkbox |\n',
'chooseFromFileChooser': 'Chooses from a filechooser by pushing the approve button.\nAn optional file name can be provided, which is inserted to the file name textfield.\nExpects the file chooser to be open.\n\nExample:\n| `Push Button` | Open File    |\n| `Choose From File Chooser` | /tmp/elements.xml |\n',
'clearSelectionFromList': 'Clears selection from list.\n\nExample:\n| `Clear Selection From List` | myList |\n',
'clearTableCell': 'Clears table cell contents.\n\nExample:\n| `Clear Table Cell` | myTable | 1 | 2 |\n',
'clearTableSelection': 'Clears selection from a table.\n\nExample:\n| `Clear Table Selection` | myTable |\n',
'clearTextField': 'Clears contents of text component (e.g. text field, password field, text area).\n\nSee `[#Locating components|Locating components]` for details.\n\nExamples:\n| `Clear Textfield` | nameTextField |\n| `Clear Textfield` | awt=streetaddress |\n',
'clearTreeSelection': 'Clears selections from a tree.\n\nExample:\n| `Clear Tree Selection` | myTree |\n',
'clickHyperLink': 'Clicks on a hyperlink in a JEditorPane.\nFails if the link is not found.\n\nExample:\n| `Click Hyperlink` | myEditor | Network Elements |\n',
'clickOnComponent': 'Clicks on a component.\nThe number of clicks can be given as second argument.\n\nExamples:\n| `Click On Component` | myComponent |   | |\n| `Click On Component` | myComponent | 2 | # double click |\n',
'clickOnListItem': 'Clicks on a list item.\n\nExamples:\n| `Click On List Item` | myList | myItem |\n| `Click On List Item` | myList | 0      | \n\nAn optional click count parameter can be provided for example if a double click is required.\nDefault click count is one:\n| `Click On List Item` | myList | myItem | 2 | # doubleclicks on item |\n',
'clickOnTableCell': 'Clicks on a cell in a table, optionally using click count, a specific mouse button and keyboard modifiers.\n\nThe codes used for mouse button and key modifiers are the field names from ``java.awt.event.InputEvent``. For example: ``BUTTON1_MASK``, ``CTRL_MASK``, ``ALT_MASK``, ``ALT_GRAPH_MASK``, ``SHIFT_MASK``, and ``META_MASK``.\n\n*Note:* Some keys have more convinient case insensitive aliases that can be used: ``LEFT BUTTON``, ``RIGHT BUTTON``, ``SHIFT``, ``CTRL``, ``ALT``, ``META``\n\nExamples:\n| `Click On Table Cell`  | myTable | 0 | 2 | # Double clicks with mouse button 2 on the cell in the first row and third column... |\n| ... | 2 | RIGHT BUTTON | ALT | # ... while holding down the ALT key |\n| `Click On Table Cell`  | myTable | 1 | Header | # Single click on the cell in the second row and column with header \'Header\'... |\n| ... | 1 | BUTTON1_MASK | CTRL_MASK | SHIFT_MASK | # ... while holding down the CTRL and SHIFT keys |\n',
'clickOnTreeNode': 'Clicks on a tree node.\n\nExamples:\n| `Click On Tree Node` | myTree | Root|Folder |\n| `Click On Tree Node` | myTree | 0      | \n\nAn optional ``clickCount`` parameter can be provided for example if a double click is required.\nDefault click count is one:\n| `Click On Tree Node` | myTree | Root|Folder | 2 | # doubleclicks on node |\n',
'clickTableHeader': 'Clicks on table header of the given column.\n\nColumn can be identified either by index or by column title. Indexes start at 0.\n\nExamples:\n| `Click Table Header` | myTable | 2 | # Click the third column |\n| `Click Table Header` | myTable | amount | # Click the column that has title \'amount\' |',
'closeAllDialogs': 'Closes all the dialogs that are open.',
'closeDialog': 'Closes a dialog.\n\n*N.B.* Regular expression can be used to close the dialog by prefixing the identifier with ``regexp=``.\nSee more details in `[#Regular expressions|Regular expressions]` section.\n\nExamples:\n| `Close Dialog` | About |\n| `Close Dialog`  | regexp=^A.* | Closes a dialog starting with \'A\' | \n',
'closeInternalFrame': 'Closes internal frame.\n\nExample:\n| `Close Internal Frame`  | My Internal Frame |\n',
'closeWindow': 'Closes a window.\n\n*N.B.* Regular expression can be used to close the window by prefixing the identifier with ``regexp=``.\nSee more details in `[#Regular expressions|Regular expressions]` section.\n\nExamples:\n| `Close Window` | Help |\n| `Close Window` | regexp=^H.* | Closes a window starting with letter H. |\n',
'collapseAllTreeNodes': 'Collapses all nodes in a tree.\n\nExample:\n| `Collapse All Tree Nodes` | myTree |\n',
'collapseTreeNode': 'Collapses a node in a tree.\n\nSee `Expand Tree Node` for information about ``nodeIdentifier``.\n\nExamples:\n| `Collapse Tree Node` | myTree | Root|Folder |\n| `Collapse Tree Node` | myTree | 3 |\n',
'comboBoxShouldBeDisabled': 'Fails if combobox is enabled.\n\nExample:\n| `Combo Box Should Be Disabled` | OK |\n',
'comboBoxShouldBeEnabled': 'Fails if combobox is disabled.\n\nExample:\n| `Combo Box Should Be Enabled` | OK |\n',
'componentShouldBeVisible': 'Checks that component is visible.\nEven if one pixel of the component is visible, this keyword will pass.\n\nExample:\n| `Component Should Be Visible` | myComponent |\n',
'componentShouldExist': 'Fails if component does not exist within current context.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`\n\nExample:\n| `Component Should Not Exist` | myPanel |\n',
'componentShouldNotBeVisible': 'Checks that component is not visible.\nFails if even one pixel of the component is visible.\n\nExample:\n| `Component Should Not Be Visible` | myComponent |\n',
'componentShouldNotExist': 'Fails if component exists within current context.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`\n\nExample:\n| `Component Should Not Exist` | myPanel |\n',
'deIconifyInternalFrame': 'De-iconifies internal frame.\n\nExample:\n| `Close Internal Frame`  | My Internal Frame |\n',
'decreaseSpinnerValue': 'Scrolls spinner button down.\nThe number of notches to scroll can be given as a second argument.\n\nExamples:\n| `Decrease Spinner Value` | mySpinner |   | # scrolls spinner button down a notch |\n| `Decrease Spinner Value` | mySpinner | 4 | # scrolls spinner button down four notches |\n',
'dialogShouldBeOpen': 'Fails if the dialog is not open.\n\nExample:\n| `Dialog Should Be Open` | About |\n',
'dialogShouldNotBeOpen': 'Fails if the dialog is open.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.\n\nExample:\n| `Set Jemmy Timeouts` | 2 |\n| `Dialog Should Not Be Open` | About |\n',
'expandAllTreeNodes': 'Expands all nodes in a tree.\n\nExample:\n| `Expand All Tree Nodes` | myTree |\n',
'expandTreeNode': 'Expands a node in a tree.\n\nArgument ``nodeIdentifier`` can be either tree path (i.e visible labels of nodes to be expanded), or index of the expanded node element. Nested structures can only be expanded using the tree path syntax.\n\nExamples:\n| `Expand Tree Node` | myTree | Root|Folder |\n| `Expand Tree Node` | myTree | 3 |\n',
'findTableRow': 'Finds the first row index that has a cell  that contains the given text.\nThis is useful when we want to operate on cells which location can change.\n\nExamples:\n| ${row}= | `Find Table Row` | myTable | Some Value |\n| `Select From Table Cell Popup Menu` | myTable | ${row} | 2 | Activate |\n| ${row}= | `Find Table Row` | myTable | Some Value | Some Column | # Searches the \'Some Value\' from the specified  \'Some Column\'  | \n',
'focusToComponent': 'Sets focus to the component.\nUseful for example when sending keyboard events to a component.\n\nExample:\n| `Focus To Component`     | myTextField |           | |\n| `Send Keyboard Event`    | VK_C          | CTRL_MASK | # paste from clipboard |\n',
'getButtonText': 'Uses current context to search for a button and when found, returns the text it is labeled with.\n\nExample:\n| ${buttonText}=    | `Get Button Text` | myButton      |\n| `Should Be Equal` | My Button         | ${buttonText} |\n',
'getComboboxValues': 'Returns a list containing all the values of a combobox.\n\n*N.B* This keyword will return the values contained by ``javax.swing.ComboBoxModel``,\nthis is not necessarily what is displayed on the GUI.\n\nExample:\n| ${comboboxValues}= | `Get Combobox Values` | myCombobox |\n| `Should Contain`  | ${expectedValue} | ${comboboxValues} |\n',
'getCurrentContext': 'Returns the component name in current context or title if window or dialog is selected.\n\nExample:\n| ${context}= | `Get Current Context` | # Sets the identifier of the current context to a variable |\n',
'getInternalFramesInContext': 'Returns all frames that are open in the current context.\n\nReturns empty list if the context is not selected.\n\nExample:\n| `Select Main Window` |\n| ${frames}= | `Get Internal Frames In Context` |\n| `Should Contain` | ${frames} | Test Internal Frame |\n',
'getLabelContent': 'Returns the text displayed on a label.\nAssumes that the label exists in the current context.\n\nExample:\n| ${labelText}=     | `Get Label Content` | addressLabel |\n| `Should Be Equal` | Address:            | ${labelText} |\n',
'getListItemCount': 'Returns the number of items contained in list.\n\nExample:\n| ${listItemCount}=    | `Get List Item Count` | myList      |\n| `Should Be Equal As Integers` | 2 | ${listItemCount} |\n',
'getListValues': 'Returns all values from a list.\n\nExample:\n| ${values}= | `Get List Values` | myList |\n| `Should Be Equal`  | ${values} | one, two, three |\n',
'getMainMenuItemName': 'Selects an item from the menu of the window that was opened first and returns it\'s name.\n\nExample:\n| ${mainMenuItemName}= | `Get Main Menu Item Name` | 0                   |\n| `Should Be Equal`    | File                      | ${mainMenuItemName} |\n',
'getMainMenuItemNames': 'Selects all items from the menu of the window that was opened first and returns their names.\n\nExample:\n| @{mainMenuItemNames}= | `Get Main Menu Item Names` |\n| `Should Contain` | @{mainMenuItemNames} | File |\n',
'getMenuItemNames': 'Gets names of menu items.\n\nReturns empty list if menu item has no children.\n\nExamples:\n| @{menus} | `Get Menu Item Names` | Tools|Testing |\n| `Should Contain` | ${menus} | Test Tool |\n| @{empty} | `Get Menu Item Names` | Tools|empty |\n| `Should Be Empty` | ${empty} |\n',
'getMenuItemsFromPopupMenu': 'Gets item names from the components context popup menu.\nDoes a right click on the component and retrieves the specified menu items from the popup menu.\n\nExample:\n| @{items}= | `Get Menu Items From Popup Menu` | myComponent | Actions |\n| `Should Contain` | ${items} | Do something |',
'getNodeItemsFromTreePopupMenu': 'Gets item names from the node context popup menu.\nClears earlier selections.\nIf several nodes have the same path then *only the first* menu item names of those nodes are returned.\n\nExample:\n| @{items}= | `Get Node Items From Tree Popup Menu` | myTree | Root|Folder | Actions |\n| `Should Contain` | ${items} | Do something |',
'getSelectedItemFromComboBox': 'Returns an item from a combobox.\n\nExample:\n| ${selectedItem}=   | `Get Selected Item From Combobox` | myComboBox      |\n| `Should Be Equal`  | item three                        | ${selectedItem} |\n',
'getSelectedItemFromDropdownMenu': 'Alias for `Get Selected Item From Combobox` keyword.\n',
'getSelectedTabLabel': 'Returns the label of the tab that is currenctly selected.\nExpects that only one tab pane exists in the current context.\nIf you need to operate on a different tab pane use `Select Tab Pane` keyword first.\n\nExample:\n| ${currentTab}= | `Get Selected Tab Label` |\n| `Should Be Equal` | Customer Information | ${currentTab} |\n',
'getSelectedTableCellValue': 'Returns selected cell\'s value from a table.\n\nOptional parameter ``source`` allows to override text extraction strategy. Available values are ``auto`` (default, will try to get text from cell component first and then from table model) and ``model`` (will only try to get text from table model).\n\nExample:\n| ${cellValue}=   | `Get Selected Table Cell Value`   | myTable      |\n| `Should Be Equal` | tuesday                         | ${cellValue} |\n',
'getSelectedValueFromList': 'Returns the item that\'s currently selected in the list.\n\nExample:\n| ${listItem}=      | `Get Selected Value From List` | myList      |\n| `Should Be Equal` | Expected Item                  | ${listItem} |\n',
'getSelectedWindowTitle': 'Returns the title of the selected window.\nAssumes current context is window.\n\nExample:\n| ${title}=         | `Get Selected Window Title` |          |\n| `Should Be Equal` | Help Contents               | ${title} |\n',
'getSliderValue': 'Uses current context to search for a slider and when found, returns its current value.\n\nExample:\n| ${sliderValue}=  | Get Slider Value | mySlider    |\n| `Should Be Equal As Integers` | 12     | ${sliderValue} |\n',
'getSpinnerValue': 'Uses current context to search for a spinner button and when found, returns its current value.\n\nExample:\n| ${spinnerValue}=  | `Get Spinner Value` | mySpinner    |\n| `Should Be Equal As Integers` | 12     | ${spinnerValue} |\n',
'getTableCellProperty': 'Returns the property of the table cell.\n\nExample:\n| ${background}= | `Get Table Cell Property` | myTable | 1 | 2 | background |\n| `Should Be Equal As Integers` | 255 | ${background.getRed()} | | | |\n',
'getTableCellValue': 'Returns cell\'s value from a table.\n\nThe value from cell rendered with check box is a true/false string.\nOptional parameter ``source`` allows to override text extraction strategy. Available values are ``auto`` (default, will try to get text from cell component first and then from table model) and ``model`` (will only try to get text from table model).\n\nExample:\n| ${cellValue}=     | `Get Table Cell Value` | myTable | 0            | 2 |\n| `Should Be Equal` | tuesday                |         | ${cellValue} |   |\n',
'getTableColumnCount': 'Returns the number of columns from a table.\n\nExample:\n| ${columnCount}= | `Get Table Column Count` | myTable |\n| `Should Be Equal As Integers` | 4 | ${columnCount} |\n',
'getTableColumnValues': 'Returns a list containing all the values of a table column.\n\nExample:\n| ${columnValues}=  | `Get Table Column Values` | myTable | columnTwo |\n| `Should Contain`  | ${expectedValue}  | ${columnValues} |\n',
'getTableHeaders': 'Returns table\'s header names.\n\nExample:\n| @{headers}= | `Get Table Headers` | myTable |\n',
'getTableRowCount': 'Returns the number of rows from a table.\n\nExample:\n| ${rowCount}= | `Get Table Row Count` | myTable |\n| `Should Be Equal As Integers` | 4 | ${rowCount} |\n',
'getTableRowValues': 'Returns a list containing all the values of a table row.\n\nExample:\n| ${rowValues}= | `Get Table Row Values` | myTable | 2 |\n| `Should Contain`  | ${expectedValue} | ${rowValues} |\n',
'getTableValues': 'Returns a list of table rows containing all the values of a table.\n\nExample:\n| ${tableValues}= | `Get Table Values` | myTable | rowThree |\n| `Should Be Equal`  | ${expectedValue} | ${tableValues[1][2]} |\n',
'getTextFieldValue': 'Returns the value of a text component (e.g. text field, password field, text area).\n\nSee `[#Locating components|Locating components]` for details.\n\nExample:\n| ${textFieldValue}= | `Get Textfield Value` | nameTextField     |\n| `Should Be Equal`  | John Doe              | ${textFieldValue} |\n',
'getTooltipText': 'Returns the component\'s tooltip text.\n\nExample:\n| ${tooltip}= | `Get Tooltip Text` | saveButton |\n| `Should Be Equal`    | Save | ${tooltip} |\n',
'getTreeNodeChildNames': 'Returns a list with all the child node names of the specified node.\n\nExample:\n| ${expectedElements}= | `Create List` | someElement | otherElement |\n| ${actualElements}=   | `Get Tree Node Child Names` | myTree | Element Folder |\n| `Lists Should Be Equal` | ${expectedElements} | ${actualElements} | # This keyword comes from Collections library |\n',
'getTreeNodeCount': 'Returns the count of all visible nodes.\n\nExample:\n| ${nodeCount}= | `Get Tree Node Count` | myTree |\n| `Should Be Equal As Integers` | 3 | ${nodeCount} |\n',
'getTreeNodeIndex': 'Returns the node index.\nArgument ``nodePath`` must be a string of form ``path|to|node``.\n\nExample:\n| ${nodeIndex}= | `Get Tree Node Index` | myTree | Root|Folder|ElementX |\n| `Should Be Equal As Integers` | 4 | ${nodeIndex} |\n',
'getTreeNodeLabel': 'Returns the node name.\nArgument ``nodeIndex`` must be a number and it is counted from visible nodes (index starts from 0).\n\nExample:\n| ${nodeLabel}= | `Get Tree Node Label` | myTree | 3 |\n| `Should Be Equal` | Element1 | ${nodeLabel} |\n',
'iconifyInternalFrame': 'Iconifies internal frame.\n\nExample:\n| `Close Internal Frame`  | My Internal Frame |\n',
'increaseSpinnerValue': 'Scrolls spinner button up.\nThe number of notches to scroll can be given as a second argument.\n\nExamples:\n| `Increase Spinner Value` | mySpinner |   | # scrolls spinner button up a notch |\n| `Increase Spinner Value` | mySpinner | 4 | # scrolls spinner button up four notches |\n',
'insertIntoTextField': 'Inserts text into a text component (e.g. text field, password field, text area).\n\nSee `[#Locating components|Locating components]` for details.\n\nExamples:\n| `Insert Into Textfield` | nameTextField | John Doe |\n| `Insert Into Textfield` | awt=streetaddress | Karaportti 3 |\n',
'internalFrameShouldBeOpen': 'Fails if the internal frame is *not* open.\n\nExample:\n| `Internal Frame Should Be Open` | My Internal Frame |\n',
'internalFrameShouldExist': 'Fails if the internal frame doesn\'t exist in the current context.\n\nExample:\n| `Internal Frame Should Exist` | My Internal Frame |\n',
'internalFrameShouldNotBeOpen': 'Fails if the internal frame *is* open.\n\nExample:\n| `Internal Frame Should Not Be Open` | My Internal Frame |\n',
'internalFrameShouldNotExist': 'Fails if the internal frame exists in the current context.\n\nExample:\n| `Internal Frame Should Not Exist` | My Internal Frame |\n',
'labelShouldExist': 'Fails if label does not exist within current context.\n\nExample:\n| `Label Should Exist` | myLabel |\n',
'labelShouldNotExist': 'Fails if label exists within current context.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.\n\nExample:\n| `Set Jemmy Timeouts`     | 1 |\n| `Label Should Not Exist` | myLabel |\n',
'labelTextShouldBe': 'Checks the equality of given text and the text displayed on a label.\nAssumes that the label exists in the current context.\n\nExample:\n| `Label Text Should Be` | addressLabel | Address: |\n',
'launchApplication': 'Launches application with the given arguments.\n\nExample:\n| `Launch Application` | com.acme.myapplication.MyApp | arg1 | arg2 |\n',
'listComponentMethods': 'List methods of components object.\nWhen working with custom components you may use this keyword to discover methods you can call with `Call Component Method` keyword.\n\nExample:\n| `List Component Methods` | myComponent |\n',
'listComponentsInContext': 'Prints components (their types and their internal names) from the selected context.\n\nBy default returns the component names without formatting used in the printout. If given an argument, the return value will have the same formatting as the printout. The internal name is set with component\'s ``setName`` method: https://docs.oracle.com/javase/7/docs/api/java/awt/Component.html#setName(java.lang.String).\nSee keywords, `Select Window`, `Select Dialog` and `Select Context` for details about context.\n\nExamples:\n| `Select Main Window`         |\n| `List Components In Context` |\n| `List Components In Context` | formatted |\n',
'listShouldContain': 'Fails if value not in list.\n\nExample:\n| `List Should Contain` | myList | item |\n',
'listShouldNotContain': 'Fails if value is in list.\n\nExample:\n| `List Should Not Contain` | myList | item |\n',
'listWindows': 'Gets list of open window titles.\n\nLogs the window titles and names in parenthesis.\n\nExample:\n| `List Windows` |\n',
'mainMenuItemShouldBeChecked': 'Fails if checkbox menu item is not checked in the opened window that was opened first.\n\nExample:\n| `Main Menu Item Should Be Checked` | Tools|My Checkbox |\n',
'mainMenuItemShouldExist': 'Fails if menu item doesn\'t exist in the window that was opened first.\nShortcut for:\n| `Select Window`    | 0 |\n| `Menu Item Should Exist` | Tools|Testing|MyTestTool |\n\nExample:\n| `Main Menu Item Should Exist` | Tools|Testing|Test Tool |\n',
'mainMenuItemShouldNotBeChecked': 'Fails if checkbox menu item is checked in the opened window that was opened first.\n\nExample:\n| `Main Menu Item Should Not Be Checked` | Tools|My Checkbox |\n',
'mainMenuItemShouldNotExist': 'Fails if menu item exists in the window that was opened first.\nShortcut for:\n| `Select Window`    | 0 |\n| `Menu Item Should Not Exist` | Tools|Testing|MyTestTool |\n\nExample:\n| `Main Menu Item Should Not Exist` | Tools|Testing|Test Tool |\n',
'maximizeInternalFrame': 'Maximizes internal frame.\n\nExample:\n| `Maximize Internal Frame`  | My Internal Frame |\n',
'menuItemShouldBeChecked': 'Searches for an checkbox menu item from the menu of the currently selected window and fails if it is not checked.\n\nExample:\n| `Menu Item Should Be Checked` | Tools|My Checkbox |\n',
'menuItemShouldBeDisabled': 'Alias for `Menu Item Should Not Be Enabled`\n',
'menuItemShouldBeEnabled': 'Searches for an menu item from the menu of the currently selected window and fails if it is disabled.\n\nExample:\n| `Select Window`               | My Application           |\n| `Menu Item Should Be Enabled` | Tools|Testing|MyTestTool |\n',
'menuItemShouldExist': 'Fails if menu item doesn\'t exist.\n\nExample:\n| `Menu Item Should Exist` | Tools|Testing|Test Tool |\n',
'menuItemShouldNotBeChecked': 'Searches for an checkbox menu item from the menu of the currently selected window and fails if it is checked.\n\nExample:\n| `Menu Item Should Not Be Checked` | Tools|My Checkbox |\n',
'menuItemShouldNotBeEnabled': 'Searches for an menu item from the menu of the currently selected window and fails if it is enabled.\n\nExample:\n| `Select Window`                   | My Application           |\n| `Menu Item Should Not Be Enabled` | Tools|Testing|MyTestTool |\n',
'menuItemShouldNotExist': 'Fails if menu item exists.\n\nExample:\n| `Menu Item Should Not Exist` | Tools|Testing|Test Tool |\n',
'minimizeInternalFrame': 'Minimizes internal.\n\nExample:\n| `Minimize Internal Frame`  | My Internal Frame |\n',
'pushButton': 'Uses current context to search for a button and when found, pushes it.\n\nExample:\n| `Push Button` | OK |\n',
'pushRadioButton': 'Uses current context to search for a radiobutton and when found, pushes it.\n\nExample:\n| `Select Radio Button` | My Radio Button |\n',
'pushToggleButton': 'Uses current context to search for a button and when found, pushes it.\n\nExample:\n| `Push Toggle Button` | Activated |\n',
'radioButtonShouldBeDisabled': 'Fails if radio button is enabled.\n\nExample:\n| `Radio Button Should Be Disabled` | My Radio Button |\n',
'radioButtonShouldBeEnabled': 'Fails if radio button is disabled.\n\nExample:\n| `Radio Button Should Be Enabled` | My Radio Button |\n',
'radioButtonShouldBeSelected': 'Fails if radiobutton is not selected.\n\nExample:\n| `Radio Button Should Be Selected` | My Radio Button |\n',
'radioButtonShouldNotBeSelected': 'Fails if radiobutton is selected.\n\nExample:\n| `Radio Button Should Not Be Selected` | My Radio Button |\n',
'rightClickOnComponent': 'Right clicks on a component.\n\nExample:\n| `Right Click On Component` | myComponent |',
'runKeywordInSeparateThread': 'Executes the given keyword with the given arguments in a separate thread.\nUseful if the given keyword starts a process that stays running (e.g. opens a dialog) and doesn\'t return.\nKnown limitations:\n- The return value of the keyword being run is ignored.\n- Exceptions thrown by the keyword are ignored, which implies that this keyword should not be used\n  in conjunction with keywords such `Label Text Should Be` or `Menu Item Should Be Enabled`.\n',
'scrollComponentToView': 'Scrolls component to view.\n\nExample:\n| `Scroll Component To View` | myComponent |\n',
'selectAllListItems': 'Selects all list items.\n\nExample:\n| `Select All List Items` | My List |\n',
'selectContext': 'Selects a container as current context.\nContext has to be a window, dialog, internal frame or panel. Requires that a parent context has been selected beforehand using `Select Window` or `Select Dialog`.\n\nExample:\n| `Select Window`  | Main Window | # Selects the \'parent context\' |\n| `Select Context` | myPanel     | # Sets \'myPanel\' as current context |\n',
'selectDialog': 'Selects a dialog as current context and sets focus to it.\n\n*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.\nSee more details in `[#Regular expressions|Regular expressions]` section.\n\nExamples:\n| `Select Dialog`  | About |\n| `Select Dialog`  | regexp=^A.* | Selects a dialog starting with \'A\' | \n',
'selectFromComboBox': 'Selects an item from a combobox.\nThe item selection is verified by default and can be disabled using the optional ``verifySelection`` parameter with any value.\n\n*N.B* If the ``comboItemIdentifier`` is a numerical value it vill be interpreted as index.\n\n*N.B.* If the combobox changes its items on selection, disable the verification and optionally check the selection using the keyword `Get Selected Item From Combo Box`.\n\nExamples:\n| `Select From Combo Box` | myComboBox | myItem | # Selects \'myItem\' from combobox |\n| `Select From Combo Box` | myComboBox | 0      | # Selects the first item from combobox |\n| `Select From Combo Box` | myComboBox | myItem | don\'t verify | # Selects \'myItem\' from combobox and doesn\'t verify that myItem is selected |\n',
'selectFromDropdownMenu': 'Alias for `Select From Combobox` keyword.\n',
'selectFromList': 'Selects an item from the list.\n\nExamples:\n| `Select From List` | myList | myItem | # selects \'myItem\'                   |\n| `Select From List` | myList | 0      | # selects the first item in the list |\n\n| `Select From List` | myList | myItem | 2 | # doubleclicks on item |\nAny number of list item identifiers can be provided to select multiple items at once:\n| `Select From List` | myList | myItem | anotherItem | yetAnother |\n',
'selectFromMainMenu': 'Selects an item from the menu of the window that was opened first.\nShortcut for:\n| `Select Window`    | 0 |\n| `Select From Menu` | Tools|Testing|MyTestTool |\n\nExample:\n| `Select From Main Menu` | Tools|Testing|MyTestTool |\n',
'selectFromMainMenuAndWait': 'Selects an item from the menu of the window that was opened first and waits for action to finish.\nShortcut for:\n| `Select Window`             | 0                        |\n| `Select From Menu And Wait` | Tools|Testing|MyTestTool |\n\nThis keyword will not work, for example, if the menu item opens a dialog.\n\nExample:\n| `Select From Main Menu And Wait` | Tools|Testing|MyTestTool |\n',
'selectFromMenu': 'Selects an item from the menu of the currently selected window.\n\nExample:\n| `Select Window`    | My Application           |\n| `Select From Menu` | Tools|Testing|MyTestTool |\n',
'selectFromMenuAndWait': 'Selects an item from the menu of the currently selected window and waits for action to finish.\nThis keyword will not work, for example, if the menu item opens a dialog.\n\nExample:\n| `Select Window`             | My Application           |\n| `Select From Menu And Wait` | Tools|Testing|MyTestTool |\n',
'selectFromPopupMenu': 'Selects an item from the components context popup menu.\nDoes a right click on the component and selects the specified menu item from the popup menu.\n\nExample:\n| `Select From Popup Menu` | myComponent | Actions | Do something |\n',
'selectFromPopupMenuOnSelectedTreeNodes': 'Invokes a menu action on all the selected tree nodes.\nDoes not wait for a result.\nSeparator for items is ``|``.\n\nExamples:\n| `Select Tree Node` | myTree | Root|Folder1 |\n| `Select Tree Node` | myTree | Root|Folder2 |\n| `Select From Popup Menu On Selected Tree Nodes` | myTree | Remove | ',
'selectFromTableCellPopupMenu': 'Selects an item from a table cell popup.\nSeparator for items is ``|``.\n\nExample:\n| `Select From Table Cell Popup Menu` | myTable | 1 | 3 | Cell Actions|Clear Cell Value | ',
'selectFromTableCellPopupMenuOnSelectedCells': 'Selects an item from a table cell popup on the table cells that are selected.\nSeparator for items is ``|``.\n\nExample:\n| `Select From Table Cell Popup Menu On Selected Cells` | myTable | Cell Actions|Clear Cell Value | ',
'selectFromTreeNodePopupMenu': 'Selects an item from the tree node\'s popup menu.\n\nExample:\n| `Select From Tree Node Popup Menu` | myTree | Root|Folder | New Folder | ',
'selectFromTreeNodePopupMenuInSeparateThread': 'Selects an item from the tree node\'s popup menu and does not wait for a result.\nNeeded if the action starts a process that stays running (e.g. opens a dialog) and the above keyword doesn\'t return.\nSeparator for items is ``|``.\n\nExample:\n| `Select From Tree Node Popup Menu In Separate Thread` | myTree | Root|Folder | New Folder | ',
'selectMainWindow': 'Selects the window that was opened first as current context.\n\nExample:\n| `Select Main Window` |\n',
'selectRadioButton': '*DEPRECATED* Use keyword `Push Radio Button` instead.\n',
'selectTab': 'Selects a tab.\nThe optional tab pane identifier can be provided, otherwise the first matching tab is selected.\n\nExamples:\n| `Select Tab` | Customer Information |\n| `Select Tab` | Customer Information | Customers |\n',
'selectTabAsContext': 'Selects a tab and sets it as the context.\nThe optional tab pane identifier can be provided, otherwise the first matching tab is selected.\n\nExamples:\n| `Select Tab` | Customer Information |\n| `Select Tab` | Customer Information | Customers |\n',
'selectTabPane': 'Sets a tab pane as the current context.\nUseful if you have several tab panes in the window.\n\nExample:\n| `Select Tab Pane` | Other Tab Pane |\n| `Select Tab` | Customer Information |\n',
'selectTableCell': 'Selects a cell in a table.\n\nExamples:\n| `Select Table Cell` | myTable | 0 | 2       | # Selects cell from first row and third column |\n| `Select Table Cell` | myTable | 1 | Keyword | # Selects cell from second row and column with header \'Keyword\' |\n',
'selectTableCellArea': 'Selects a cell area in a table.\nDoes not clear earlier selections.\n\nExample:\n| `Select Table Cell Area` | myTable | 0 | 2 | 0 | 2 | # Selects cells from first to third row and first to third column |\n',
'selectTreeNode': 'Sets a node as selected in a tree.\nDoes not clear earlier selections.\nIf several nodes have the same path then *only the first* of those nodes is selected.\n\nExample:\n| `Select Tree Node` | myTree | Root|Folder |\nAny number of node identifiers can be provided to select multiple nodes at once:\n| `Select Tree Node` | myTree | Root|Folder | Root|Folder2 | Root|Folder3 |\n',
'selectWindow': 'Selects a window as current context and sets focus to it.\n\n*N.B.* Regular expression can be used to select the window by prefixing the identifier with ``regexp=``.\nSee more details in `[#Regular expressions|Regular expressions]` section.\n\nExamples:\n| `Select Window` | Help |\n| `Select Window` | regexp=^H.* | Selects a window starting with letter H. |\n',
'sendKeyboardEvent': 'Sends keystrokes to the currently selected component.\nKeystroke codes must be one of the mappings in ``abbot.tester.KeyStrokeMap`` (https://sourceforge.net/p/abbot/svn/1214/tree/trunk/abbot/src/abbot/tester/KeyStrokeMap.java#l110).\nConstants from ``java.awt.event.InputEvent`` can be used as optional modifiers.\n\nExamples with textfield:\n| `Focus To Component`    | myTextfield          |                      |\n| `Send Keyboard Event`   | VK_S                 |                      |\n| `Send Keyboard Event`   | VK_O                 |                      |\n| `Send Keyboard Event`   | VK_M                 |                      |\n| `Send Keyboard Event`   | VK_E                 |                      |\n| `Send Keyboard Event`   | VK_T                 | SHIFT_MASK           |\n| `Send Keyboard Event`   | VK_E                 |                      |\n| `Send Keyboard Event`   | VK_X                 |                      |\n| `Send Keyboard Event`   | VK_T                 |                      |\n| ${textFieldContents}=   | `Get Text Field Value` | myTextfield        |\n| `Should Be Equal`       | someText             | ${textFieldContents} |\n\nExamples with table:\n| `SelectTableCell`               | myTable | 0          | 0 |\n| `Send Keyboard Event`           | VK_TAB  |            |   |\n| `Table Cell Should Be Selected` | myTable | 0          | 1 |\n| `Send Keyboard Event`           | VK_TAB  | SHIFT_MASK |   |\n| `Table Cell Should Be Selected` | myTable | 0          | 0 |\n',
'setJemmyDispatchModel': 'Sets the jemmy dispatching model.\nThe event dispatching is explained in https://jemmy.java.net/tutorial.html#robot\nPossible models are ``QUEUE``, ``QUEUE_SHORTCUT`` (default), ``ROBOT``, ``ROBOT_SMOOTH``.\nReturns the old dispatching model.\n\nExample:\n| `Set Jemmy Dispatch Model` | ROBOT |\n| ${old model}= | `Set Jemmy Dispatch Model` | ROBOT_SMOOTH |\n',
'setJemmyTimeout': 'Sets the jemmy timeout used for waiting a component to appear.\nTimeout names are listed here: http://jemmy.java.net/OperatorsEnvironment.html#timeouts\nReturns the old timeout setting value.\n\nThis keyword by default takes timeout value is seconds, you can however suffix it with ``ms`` to provide it in milliseconds.\nReturn value will always be in units you used for the argument.\n\nExample:\n| `Set Jemmy Timeout` | DialogWaiter.WaitDialogTimeout | 3 |\n| ${oldSetting}= | `Set Jemmy Timeout` | DialogWaiter.WaitDialogTimeout | 3 |\n',
'setJemmyTimeouts': 'Sets all relevant jemmy timeouts. \nBy default they are all set to 5 seconds.\n\nThis keyword by default takes timeout value is seconds, you can however suffix it with ``ms`` to provide it in milliseconds.\n\nList of all the timeouts this keywords sets:\n| *Timeout Name* | *Description* |\n| DialogWaiter.WaitDialogTimeout | Time to wait dialog displayed |\n| FrameWaiter.WaitFrameTimeout | Time to wait frame displayed |\n| WindowWaiter.WaitWindowTimeout | Time to wait window displayed |\n| ComponentOperator.WaitComponentTimeout | Time to wait component displayed |\n| ComponentOperator.WaitComponentEnabledTimeout | Time to wait component enabled |\n| ComponentOperator.WaitStateTimeout | Used for example in combobox selection |\n| JComboboxOperator.WaitGetSelectedItemTimeout | Time to wait for combobox selected item fetching |\n| JComboBoxOperator.WaitListTimeout | Time to wait list opened | \n| JMenuOperator.WaitPopupTimeout | Time to wait popup displayed |\n| JTreeOperator.WaitNodeExpandedTimeout | Time to wait node expanded |\n| JTreeOperator.WaitNextNodeTimeout | Time to wait next node displayed |\n| JTreeOperator.WaitNodeVisibleTimeout | Time to wait node visible |\n| JListOperator.WaitFindItemIndexTimeout | Time to wait for list item to appear |\n\nExample:\n| `Set Jemmy Timeouts` | 3 |\n',
'setSliderValue': 'Sets the value for the slider found from the current context.\n\nExample:\n| `Set Slider Value` | mySlider  | 7  |\n',
'setSpinnerNumberValue': 'Sets the number value for the spinner found from the current context.\n\nExamples:\n| `Set Spinner Number Value` | mySpinner  | 100  |\n| `Set Spinner Number Value` | mySpinner  | 7.5  |\n',
'setSpinnerStringValue': 'Sets the string value for the spinner found from the current context.\n\nExample:\n| `Set Spinner String Value` | mySpinner  | January  |\n',
'setSystemProperty': 'Set system property `name` to `value`\nEqual commmand line usage `-Dname=value`.',
'setTableCellValue': 'Sets cell value in a table.\n\nExample:\n| `Set Table Cell Value` | 1 | 2 | New value |\n',
'sliderShouldExist': 'Fails if slider does not exist within current context.\n\nExample:\n| `Slider Should Exist` | mySlider |\n',
'sliderShouldNotExist': 'Fails if slider exists within current context.\n\nExample:\n| `Slider Should Not Exist` | mySlider |\n',
'spinnerShouldExist': 'Fails if spinner does not exist within current context.\n\nExample:\n| `Spinner Should Exist` | dateSpinner |\n',
'spinnerShouldNotExist': 'Fails if spinner exists within current context.\n\nExample:\n| `Spinner Should Not Exist` | dateSpinner |\n',
'startApplication': 'Alias for `Launch Application` keyword\n',
'startApplicationInSeparateThread': 'Launches application in a separate thread with the given arguments.\nThis is useful if your application does something that blocks e.g. opens up a dialog.\n\nExample:\n| `Start Application In Separate Thread` | com.acme.myapplication.MyApp |\n',
'tableCellPopupMenuShouldBeDisabled': 'Fails if the given table cell popup menu is enabled.\nSeparator for items is ``|``.\n\nExample:\n| `Table Cell Popup Menu Should Be Disabled` | myTable | 1 | 3 | Cell Actions|Clear Cell Value |\n',
'tableCellPopupMenuShouldBeEnabled': 'Fails if the given table cell popup menu is disabled.\nSeparator for items is ``|``.\n\nExample:\n| `Table Cell Popup Menu Should Be Enabled` | myTable | 1 | 3 | Cell Actions|Clear Cell Value |\n',
'tableCellShouldBeEditable': 'Fails if given table cell is not editable in a table.\n\nExamples:\n| `Table Cell Should Be Editable` | myTable | 0 | 2       |\n| `Table Cell Should Be Editable` | myTable | 1 | Keyword |\n',
'tableCellShouldBeSelected': 'Fails if given table cell is not selected in a table.\n\nExamples:\n| `Table Cell Should Be Selected` | myTable | 0 | 2       |\n| `Table Cell Should Be Selected` | myTable | 1 | Keyword |\n',
'tableCellShouldNotBeEditable': 'Fails if given table cell is editable in a table.\n\nExamples:\n| `Table Cell Should Not Be Editable` | myTable | 0 | 2       |\n| `Table Cell Should Not Be Editable` | myTable | 1 | Keyword |\n',
'tableCellShouldNotBeSelected': 'Fails if given table cell is selected in a table.\n\nExamples:\n| `Table Cell Should Be Selected` | myTable | 0 | 2       |\n| `Table Cell Should Be Selected` | myTable | 1 | Keyword |\n',
'textFieldShouldBeDisabled': 'Fails if text component (e.g. text field, password field, text area) is enabled.\n\nSee `[#Locating components|Locating components]` for details.\n\nExample:\n| `Textfield Should Be Disabled` | nameTextField |\n',
'textFieldShouldBeEnabled': 'Fails if text component (e.g. text field, password field, text area) is disabled.\n\nSee `[#Locating components|Locating components]` for details.\n\nExample:\n| `Textfield Should Be Enabled` | nameTextField |\n',
'toggleButtonShouldBeSelected': 'Fails if toggle button is not selected.\n\nExample:\n| `Toggle Button Should Be Selected` | My Toggle Button |\n',
'toggleButtonShouldNotBeSelected': 'Fails if toggle button is selected.\n\nExample:\n| `Toggle Button Should Not Be Selected` | My Toggle Button |\n',
'treeNodePopupMenuItemShouldBeDisabled': 'Fails if given popup menu item is enabled.\n\nExamples:\n| `Tree Node Popup Menu Item Should Be Disabled` | myTree | Root|Folder | New Folder |\n| `Tree Node Popup Menu Item Should Be Disabled` | 0      | 1 | New Folder |\n',
'treeNodePopupMenuItemShouldBeEnabled': 'Fails if given popup menu item is disabled.\n\nExamples:\n| `Tree Node Popup Menu Item Should Be Enabled` | myTree | Root|Folder | New Folder |\n| `Tree Node Popup Menu Item Should Be Enabled` | 0 | 1 | New Folder |\n',
'treeNodeShouldBeCollapsed': 'Fails if the tree node is expanded.\n\nExample:\n| `Tree Node Should Be Collapsed` | myTree | Root|Folder |\n',
'treeNodeShouldBeExpanded': 'Fails if the tree node is collapsed.\n\nExample:\n| `Tree Node Should Be Expanded` | myTree | Root|Folder |\n',
'treeNodeShouldBeLeaf': 'Fails if the node has child nodes.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`\n\nExample:\n| `Tree Node Should Be Leaf` | myTree | Root|Folder |\n',
'treeNodeShouldBeSelected': 'Fails if the tree node is not selected.\n\nExample:\n| `Tree Node Should Be Selected` | myTree | Root|Folder |\n',
'treeNodeShouldBeVisible': 'Fails if the tree node is not visible.\n\nExample:\n| `Tree Node Should Be Visible` | myTree | Root|Folder |\n',
'treeNodeShouldExist': 'Fails if the tree node does not exist.\n\nExample:\n| `Tree Node Should Exist` | myTree | Root|Folder |\n',
'treeNodeShouldNotBeLeaf': 'Fails if the node doesn\'t have child nodes.\nYou might want to set the waiting timeout with the keyword `Set Jemmy Timeout`\n\nExample:\n| `Tree Node Should Not Be Leaf` | myTree | Root|Folder |\n',
'treeNodeShouldNotBeSelected': 'Fails if the tree node is selected.\n\nExample:\n| `Tree Node Should Be Selected` | myTree | Root|Folder |\n',
'treeNodeShouldNotBeVisible': 'Fails if the tree node is visible.\n\nExample:\n| `Tree Node Should Not Be Visible` | myTree | Root|Folder |\n',
'treeNodeShouldNotExist': 'Fails if the tree node exists.\n\nExample:\n| `Tree Node Should Not Exist` | myTree | Root|Folder |\n',
'typeIntoCombobox': 'Types text into a combobox.\n\nExample:\n| `Type Into Combobox` | myCombobox | someValue |\n',
'typeIntoTableCell': 'Types a string into a table cell.\nUses real keyboard events, this is useful when processing need to be triggered by input events.\n\nExample:\n| `Type Into Table Cell` | 1 | 2 | New value |\n',
'typeIntoTextField': 'Types text into a text component (e.g. text field, password field, text area).\nSame as `Insert Into Textfield` but sends real key events when setting text field contents.\nUseful if application expects real keyboard events instead of only setting the text of the textfield.\n\nSee `[#Locating components|Locating components]` for details.\n\nExamples:\n| `Type Into Textfield` | nameTextField | John Doe |\n| `Type Into Textfield` | awt=streetaddress | Karaportti 3 |\n',
'uncheckAllCheckboxes': 'Unchecks all checkboxes in current context.\n\nExample:\n| `Select Context` | My Checkbox Panel |\n| `Uncheck All Checkboxes` | |\n',
'uncheckCheckBox': 'Uses current context to search for a checkbox and when found, unchecks it.\n\nExample:\n| `Uncheck Check Box` | My Checkbox |\n',
'unselectTreeNode': 'Sets a tree node as unselected.\n\nExample:\n| `Unselect Tree Node` | myTree | Root|Folder |\n',
}
